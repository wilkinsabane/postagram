name: Build and Test Postagram Backend

on:
  push:
    branches: [main]

jobs:
  build-test:
    runs-on: ubuntu-latest  # Use GitHub-hosted runner

    steps:
      # Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Inject Environment Variables
      - name: Set Environment Variables
        run: echo "${{ secrets.TEST_SECRETS }}" > .env

      # Step 3: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 4: Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
        env:
          DEBIAN_FRONTEND: noninteractive

      # Step 5: Clean Up Old Containers
      - name: Clean Up Docker
        run: |
          docker-compose down -v --remove-orphans || echo "No containers to clean up"
          docker builder prune -f || echo "No builders to prune"

      # Step 6: Build Docker Containers
      - name: Build Docker Containers
        run: |
          docker-compose up -d --build --pull always
          docker-compose logs > docker_build_logs.txt
        env:
          DOCKER_BUILDKIT: 1  # Enable BuildKit for improved build performance

      # Step 7: Upload Build Logs
      - name: Upload Build Logs
        uses: actions/upload-artifact@v4
        with:
          name: docker-build-logs
          path: docker_build_logs.txt

      # Step 8: Run Tests
      - name: Run Tests in Docker
        run: |
          docker-compose exec -T api pytest -n auto core/auth/tests.py | tee test_output.log
        continue-on-error: true  # Ensure this step doesn't block failure notification

      # Step 9: Upload Test Logs
      - name: Upload Test Logs
        uses: actions/upload-artifact@v4
        with:
          name: test-logs
          path: test_output.log

      # Step 10: Notify on Failure
      - name: Notify on Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const core = require('@actions/core');
            const summary = 'Build failed. Please check the logs.';
            const logLink = `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}`;
            core.setOutput('summary', summary);
            core.setOutput('log-link', logLink);
            console.log(`${summary}\nLog Link: ${logLink}`);


  deploy:
    name: Deploying on EC2 via SSH
    if: ${{ github.event_name == 'push' }}
    needs: [build-test]
    runs-on: ubuntu-latest
    steps:
      - name: Deploying Application on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_EC2_IP }}
          username: ${{ secrets.SSH_EC2_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd ~/.scripts
            ./docker-ec2-deply.sh